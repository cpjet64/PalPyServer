from descriptions import descriptions

descriptions_dict = dict(descriptions)


def read_and_parse(file_path):
    try:
        with open(file_path, "r") as file:
            lines = file.readlines()
        header_ended = False
        section_content = []
        for line in lines:
            if "[/Script/Pal.PalGameWorldSettings]" in line:
                header_ended = True
            if header_ended:
                section_content.append(line.rstrip("\n"))
        return section_content
    except FileNotFoundError:
        return []


def extracted_pairs(section_content):
    extracted_pairs = []
    content = " ".join(section_content)
    settings_str = (
        content.split("OptionSettings=(", 1)[1].rstrip(") ")
        if "OptionSettings=(" in content
        else ""
    )
    settings = settings_str.split(",")
    for setting in settings:
        # Splitting at ';' to remove in-line comments and taking the first part
        setting = setting.split(";")[0].strip()
        if "=" in setting:
            key, value = setting.split("=", 1)
            key = key.strip()
            value = value.strip()
            try:
                value = float(value)
                if value.is_integer():
                    value = int(value)
                else:
                    value = str(value).rstrip("0").rstrip(".")
            except ValueError:
                pass
            extracted_pairs.append((key, str(value)))
    return extracted_pairs


def reconstruct_section(
    default_pairs, modified_pairs, version_number, descriptions_dict
):
    # Custom comments
    custom_comments = [
        "This PalWorldSettings.ini file was generated by PalPyServer v"
        + str(version_number)
        + ".",
        "Do not modify this file directly. Only use PalPyServer to modify this file.",
        "For questions regarding this file's configuration please contact the developer of PalPyServer Cpjet64",
        "You can reach me through the Official Palworld Discord Server.",
        "Please ignore the spelling errors in this file as the developer is a Japanese company.",
    ]

    # Merge default and modified pairs, with modified pairs taking precedence
    updated_pairs = {**default_pairs, **modified_pairs}

    # Constructing the INI content
    ini_content = "\n".join(["; " + comment for comment in custom_comments]) + "\n\n"
    ini_content += "[/Script/Pal.PalGameWorldSettings]\n"
    ini_content += "OptionSettings=("

    # Formatting each key-value pair with its description below it
    for key, value in updated_pairs.items():
        ini_content += f"\n    {key}={value},"

    ini_content += "\n)\n"

    return ini_content


def rewrite_file(new_file_path, new_section):
    # Overwrite the file with the new section only
    with open(new_file_path, "w", encoding="utf-8") as file:
        file.write(new_section)


def load_settings(default_file_path, modified_file_path):
    try:
        default_pairs = extracted_pairs(read_and_parse(default_file_path))
        with open(modified_file_path, "r") as modified_file:
            modified_content = modified_file.read().strip()
            if not modified_content:
                modified_pairs = default_pairs
            else:
                modified_pairs = extracted_pairs(read_and_parse(modified_file_path))
        return default_pairs, modified_pairs
    except FileNotFoundError:
        return [], []


def save_modified_pairs(
    default_file_path,
    modified_file_path,
    modified_pairs,
    version_number,
    descriptions_dict,
):
    # Read and parse the default pairs from the default file
    default_pairs_content = read_and_parse(default_file_path)
    default_pairs = extracted_pairs(default_pairs_content)

    # Convert default_pairs and modified_pairs to dictionaries if they are not already
    default_pairs_dict = (
        dict(default_pairs) if isinstance(default_pairs, list) else default_pairs
    )
    modified_pairs_dict = (
        dict(modified_pairs) if isinstance(modified_pairs, list) else modified_pairs
    )

    # Now call reconstruct_section with the dictionaries
    new_section = reconstruct_section(
        default_pairs_dict, modified_pairs_dict, version_number, descriptions_dict
    )

    # Call rewrite_file with the correct number of arguments
    rewrite_file(modified_file_path, new_section)
